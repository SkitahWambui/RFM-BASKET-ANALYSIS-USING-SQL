{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3c60177e",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-03-09T12:05:50.788450Z",
     "iopub.status.busy": "2025-03-09T12:05:50.788034Z",
     "iopub.status.idle": "2025-03-09T12:05:54.452991Z",
     "shell.execute_reply": "2025-03-09T12:05:54.452185Z"
    },
    "papermill": {
     "duration": 3.670797,
     "end_time": "2025-03-09T12:05:54.454722",
     "exception": false,
     "start_time": "2025-03-09T12:05:50.783925",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Import libraries\n",
    "import numpy as np \n",
    "import pandas as pd \n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "#build the fp growth algorithm\n",
    "from mlxtend.preprocessing import TransactionEncoder\n",
    "from mlxtend.frequent_patterns import fpgrowth\n",
    "from mlxtend.frequent_patterns import apriori\n",
    "from mlxtend.frequent_patterns import association_rules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e3046d15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:05:54.461692Z",
     "iopub.status.busy": "2025-03-09T12:05:54.461176Z",
     "iopub.status.idle": "2025-03-09T12:05:54.518975Z",
     "shell.execute_reply": "2025-03-09T12:05:54.517753Z"
    },
    "papermill": {
     "duration": 0.062942,
     "end_time": "2025-03-09T12:05:54.520856",
     "exception": false,
     "start_time": "2025-03-09T12:05:54.457914",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
      "  and should_run_async(code)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order ID</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Profit</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>Category</th>\n",
       "      <th>Sub-Category</th>\n",
       "      <th>PaymentMode</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>B-25681</td>\n",
       "      <td>1096</td>\n",
       "      <td>658</td>\n",
       "      <td>7</td>\n",
       "      <td>Electronics</td>\n",
       "      <td>Electronic Games</td>\n",
       "      <td>COD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>B-26055</td>\n",
       "      <td>5729</td>\n",
       "      <td>64</td>\n",
       "      <td>14</td>\n",
       "      <td>Furniture</td>\n",
       "      <td>Chairs</td>\n",
       "      <td>EMI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>B-25955</td>\n",
       "      <td>2927</td>\n",
       "      <td>146</td>\n",
       "      <td>8</td>\n",
       "      <td>Furniture</td>\n",
       "      <td>Bookcases</td>\n",
       "      <td>EMI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>B-26093</td>\n",
       "      <td>2847</td>\n",
       "      <td>712</td>\n",
       "      <td>8</td>\n",
       "      <td>Electronics</td>\n",
       "      <td>Printers</td>\n",
       "      <td>Credit Card</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>B-25602</td>\n",
       "      <td>2617</td>\n",
       "      <td>1151</td>\n",
       "      <td>4</td>\n",
       "      <td>Electronics</td>\n",
       "      <td>Phones</td>\n",
       "      <td>Credit Card</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Order ID  Amount  Profit  Quantity     Category      Sub-Category  \\\n",
       "0  B-25681    1096     658         7  Electronics  Electronic Games   \n",
       "1  B-26055    5729      64        14    Furniture            Chairs   \n",
       "2  B-25955    2927     146         8    Furniture         Bookcases   \n",
       "3  B-26093    2847     712         8  Electronics          Printers   \n",
       "4  B-25602    2617    1151         4  Electronics            Phones   \n",
       "\n",
       "   PaymentMode  \n",
       "0          COD  \n",
       "1          EMI  \n",
       "2          EMI  \n",
       "3  Credit Card  \n",
       "4  Credit Card  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#import dataset\n",
    "df = pd.read_csv('/kaggle/input/madhav-store-dataset/Details.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3aef194c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:05:54.527596Z",
     "iopub.status.busy": "2025-03-09T12:05:54.527231Z",
     "iopub.status.idle": "2025-03-09T12:05:54.560977Z",
     "shell.execute_reply": "2025-03-09T12:05:54.559532Z"
    },
    "papermill": {
     "duration": 0.038942,
     "end_time": "2025-03-09T12:05:54.562717",
     "exception": false,
     "start_time": "2025-03-09T12:05:54.523775",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1500 entries, 0 to 1499\n",
      "Data columns (total 7 columns):\n",
      " #   Column        Non-Null Count  Dtype \n",
      "---  ------        --------------  ----- \n",
      " 0   Order ID      1500 non-null   object\n",
      " 1   Amount        1500 non-null   int64 \n",
      " 2   Profit        1500 non-null   int64 \n",
      " 3   Quantity      1500 non-null   int64 \n",
      " 4   Category      1500 non-null   object\n",
      " 5   Sub-Category  1500 non-null   object\n",
      " 6   PaymentMode   1500 non-null   object\n",
      "dtypes: int64(3), object(4)\n",
      "memory usage: 82.2+ KB\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
      "  and should_run_async(code)\n"
     ]
    }
   ],
   "source": [
    "#check on the datatypes\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "609e60ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:05:54.569917Z",
     "iopub.status.busy": "2025-03-09T12:05:54.569603Z",
     "iopub.status.idle": "2025-03-09T12:05:54.589733Z",
     "shell.execute_reply": "2025-03-09T12:05:54.588768Z"
    },
    "papermill": {
     "duration": 0.025638,
     "end_time": "2025-03-09T12:05:54.591473",
     "exception": false,
     "start_time": "2025-03-09T12:05:54.565835",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
      "  and should_run_async(code)\n"
     ]
    }
   ],
   "source": [
    "#create a basket\n",
    "basket = df.groupby('Order ID')['Sub-Category'].apply(list).tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b09836b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:05:54.599021Z",
     "iopub.status.busy": "2025-03-09T12:05:54.598623Z",
     "iopub.status.idle": "2025-03-09T12:05:54.604068Z",
     "shell.execute_reply": "2025-03-09T12:05:54.602983Z"
    },
    "papermill": {
     "duration": 0.01099,
     "end_time": "2025-03-09T12:05:54.605674",
     "exception": false,
     "start_time": "2025-03-09T12:05:54.594684",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
      "  and should_run_async(code)\n"
     ]
    }
   ],
   "source": [
    "#preprocessing\n",
    "encoder = TransactionEncoder()\n",
    "encoded_basket = encoder.fit(basket).transform(basket)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0e1ac35d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:05:54.612982Z",
     "iopub.status.busy": "2025-03-09T12:05:54.612623Z",
     "iopub.status.idle": "2025-03-09T12:05:54.632809Z",
     "shell.execute_reply": "2025-03-09T12:05:54.631600Z"
    },
    "papermill": {
     "duration": 0.025656,
     "end_time": "2025-03-09T12:05:54.634442",
     "exception": false,
     "start_time": "2025-03-09T12:05:54.608786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
      "  and should_run_async(code)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accessories</th>\n",
       "      <th>Bookcases</th>\n",
       "      <th>Chairs</th>\n",
       "      <th>Electronic Games</th>\n",
       "      <th>Furnishings</th>\n",
       "      <th>Hankerchief</th>\n",
       "      <th>Kurti</th>\n",
       "      <th>Leggings</th>\n",
       "      <th>Phones</th>\n",
       "      <th>Printers</th>\n",
       "      <th>Saree</th>\n",
       "      <th>Shirt</th>\n",
       "      <th>Skirt</th>\n",
       "      <th>Stole</th>\n",
       "      <th>T-shirt</th>\n",
       "      <th>Tables</th>\n",
       "      <th>Trousers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Accessories  Bookcases  Chairs  Electronic Games  Furnishings  Hankerchief  \\\n",
       "0        False       True   False              True        False         True   \n",
       "1        False      False   False             False        False        False   \n",
       "2        False      False    True             False        False         True   \n",
       "3        False      False   False             False        False        False   \n",
       "4        False      False   False             False        False        False   \n",
       "\n",
       "   Kurti  Leggings  Phones  Printers  Saree  Shirt  Skirt  Stole  T-shirt  \\\n",
       "0  False     False   False     False  False  False  False   True    False   \n",
       "1  False     False    True     False   True  False  False  False    False   \n",
       "2   True     False   False     False   True  False  False   True    False   \n",
       "3  False     False   False     False   True  False  False  False     True   \n",
       "4  False     False   False     False   True  False  False  False    False   \n",
       "\n",
       "   Tables  Trousers  \n",
       "0   False     False  \n",
       "1   False     False  \n",
       "2   False      True  \n",
       "3   False     False  \n",
       "4   False     False  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#convert to dataframe\n",
    "encoded_basket = pd.DataFrame(encoded_basket, columns = encoder.columns_)\n",
    "encoded_basket.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1524aab9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:05:54.642239Z",
     "iopub.status.busy": "2025-03-09T12:05:54.641892Z",
     "iopub.status.idle": "2025-03-09T12:05:56.442561Z",
     "shell.execute_reply": "2025-03-09T12:05:56.441330Z"
    },
    "papermill": {
     "duration": 1.806039,
     "end_time": "2025-03-09T12:05:56.444085",
     "exception": false,
     "start_time": "2025-03-09T12:05:54.638046",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
      "  and should_run_async(code)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>support</th>\n",
       "      <th>itemsets</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.314</td>\n",
       "      <td>(Stole)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.274</td>\n",
       "      <td>(Hankerchief)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.146</td>\n",
       "      <td>(Electronic Games)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.144</td>\n",
       "      <td>(Bookcases)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.312</td>\n",
       "      <td>(Saree)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   support            itemsets\n",
       "0    0.314             (Stole)\n",
       "1    0.274       (Hankerchief)\n",
       "2    0.146  (Electronic Games)\n",
       "3    0.144         (Bookcases)\n",
       "4    0.312             (Saree)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#build the fpgrowth algorithm\n",
    "frequent_items = fpgrowth(encoded_basket, min_support = 0.003, use_colnames=True)\n",
    "frequent_items.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e2b044aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:05:56.452211Z",
     "iopub.status.busy": "2025-03-09T12:05:56.451865Z",
     "iopub.status.idle": "2025-03-09T12:05:56.652868Z",
     "shell.execute_reply": "2025-03-09T12:05:56.651734Z"
    },
    "papermill": {
     "duration": 0.206979,
     "end_time": "2025-03-09T12:05:56.654663",
     "exception": false,
     "start_time": "2025-03-09T12:05:56.447684",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
      "  and should_run_async(code)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>antecedents</th>\n",
       "      <th>consequents</th>\n",
       "      <th>antecedent support</th>\n",
       "      <th>consequent support</th>\n",
       "      <th>support</th>\n",
       "      <th>confidence</th>\n",
       "      <th>lift</th>\n",
       "      <th>representativity</th>\n",
       "      <th>leverage</th>\n",
       "      <th>conviction</th>\n",
       "      <th>zhangs_metric</th>\n",
       "      <th>jaccard</th>\n",
       "      <th>certainty</th>\n",
       "      <th>kulczynski</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(Stole)</td>\n",
       "      <td>(Hankerchief)</td>\n",
       "      <td>0.314</td>\n",
       "      <td>0.274</td>\n",
       "      <td>0.118</td>\n",
       "      <td>0.375796</td>\n",
       "      <td>1.371519</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.031964</td>\n",
       "      <td>1.163082</td>\n",
       "      <td>0.394871</td>\n",
       "      <td>0.251064</td>\n",
       "      <td>0.140215</td>\n",
       "      <td>0.403227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(Hankerchief)</td>\n",
       "      <td>(Stole)</td>\n",
       "      <td>0.274</td>\n",
       "      <td>0.314</td>\n",
       "      <td>0.118</td>\n",
       "      <td>0.430657</td>\n",
       "      <td>1.371519</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.031964</td>\n",
       "      <td>1.204897</td>\n",
       "      <td>0.373115</td>\n",
       "      <td>0.251064</td>\n",
       "      <td>0.170054</td>\n",
       "      <td>0.403227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>(Saree)</td>\n",
       "      <td>(Hankerchief)</td>\n",
       "      <td>0.312</td>\n",
       "      <td>0.274</td>\n",
       "      <td>0.090</td>\n",
       "      <td>0.288462</td>\n",
       "      <td>1.052779</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.004512</td>\n",
       "      <td>1.020324</td>\n",
       "      <td>0.072868</td>\n",
       "      <td>0.181452</td>\n",
       "      <td>0.019919</td>\n",
       "      <td>0.308464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>(Hankerchief)</td>\n",
       "      <td>(Saree)</td>\n",
       "      <td>0.274</td>\n",
       "      <td>0.312</td>\n",
       "      <td>0.090</td>\n",
       "      <td>0.328467</td>\n",
       "      <td>1.052779</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.004512</td>\n",
       "      <td>1.024522</td>\n",
       "      <td>0.069054</td>\n",
       "      <td>0.181452</td>\n",
       "      <td>0.023935</td>\n",
       "      <td>0.308464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>(Saree, Stole)</td>\n",
       "      <td>(Hankerchief)</td>\n",
       "      <td>0.116</td>\n",
       "      <td>0.274</td>\n",
       "      <td>0.046</td>\n",
       "      <td>0.396552</td>\n",
       "      <td>1.447269</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.014216</td>\n",
       "      <td>1.203086</td>\n",
       "      <td>0.349597</td>\n",
       "      <td>0.133721</td>\n",
       "      <td>0.168804</td>\n",
       "      <td>0.282217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>(Saree, Hankerchief)</td>\n",
       "      <td>(Stole)</td>\n",
       "      <td>0.090</td>\n",
       "      <td>0.314</td>\n",
       "      <td>0.046</td>\n",
       "      <td>0.511111</td>\n",
       "      <td>1.627742</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.017740</td>\n",
       "      <td>1.403182</td>\n",
       "      <td>0.423794</td>\n",
       "      <td>0.128492</td>\n",
       "      <td>0.287334</td>\n",
       "      <td>0.328804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>(Stole, Hankerchief)</td>\n",
       "      <td>(Saree)</td>\n",
       "      <td>0.118</td>\n",
       "      <td>0.312</td>\n",
       "      <td>0.046</td>\n",
       "      <td>0.389831</td>\n",
       "      <td>1.249457</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.009184</td>\n",
       "      <td>1.127556</td>\n",
       "      <td>0.226363</td>\n",
       "      <td>0.119792</td>\n",
       "      <td>0.113126</td>\n",
       "      <td>0.268633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>(Saree)</td>\n",
       "      <td>(Stole, Hankerchief)</td>\n",
       "      <td>0.312</td>\n",
       "      <td>0.118</td>\n",
       "      <td>0.046</td>\n",
       "      <td>0.147436</td>\n",
       "      <td>1.249457</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.009184</td>\n",
       "      <td>1.034526</td>\n",
       "      <td>0.290192</td>\n",
       "      <td>0.119792</td>\n",
       "      <td>0.033374</td>\n",
       "      <td>0.268633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>(Stole)</td>\n",
       "      <td>(Saree, Hankerchief)</td>\n",
       "      <td>0.314</td>\n",
       "      <td>0.090</td>\n",
       "      <td>0.046</td>\n",
       "      <td>0.146497</td>\n",
       "      <td>1.627742</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.017740</td>\n",
       "      <td>1.066194</td>\n",
       "      <td>0.562175</td>\n",
       "      <td>0.128492</td>\n",
       "      <td>0.062084</td>\n",
       "      <td>0.328804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>(Hankerchief)</td>\n",
       "      <td>(Saree, Stole)</td>\n",
       "      <td>0.274</td>\n",
       "      <td>0.116</td>\n",
       "      <td>0.046</td>\n",
       "      <td>0.167883</td>\n",
       "      <td>1.447269</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.014216</td>\n",
       "      <td>1.062351</td>\n",
       "      <td>0.425680</td>\n",
       "      <td>0.133721</td>\n",
       "      <td>0.058691</td>\n",
       "      <td>0.282217</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            antecedents           consequents  antecedent support  \\\n",
       "0               (Stole)         (Hankerchief)               0.314   \n",
       "1         (Hankerchief)               (Stole)               0.274   \n",
       "2               (Saree)         (Hankerchief)               0.312   \n",
       "3         (Hankerchief)               (Saree)               0.274   \n",
       "4        (Saree, Stole)         (Hankerchief)               0.116   \n",
       "5  (Saree, Hankerchief)               (Stole)               0.090   \n",
       "6  (Stole, Hankerchief)               (Saree)               0.118   \n",
       "7               (Saree)  (Stole, Hankerchief)               0.312   \n",
       "8               (Stole)  (Saree, Hankerchief)               0.314   \n",
       "9         (Hankerchief)        (Saree, Stole)               0.274   \n",
       "\n",
       "   consequent support  support  confidence      lift  representativity  \\\n",
       "0               0.274    0.118    0.375796  1.371519               1.0   \n",
       "1               0.314    0.118    0.430657  1.371519               1.0   \n",
       "2               0.274    0.090    0.288462  1.052779               1.0   \n",
       "3               0.312    0.090    0.328467  1.052779               1.0   \n",
       "4               0.274    0.046    0.396552  1.447269               1.0   \n",
       "5               0.314    0.046    0.511111  1.627742               1.0   \n",
       "6               0.312    0.046    0.389831  1.249457               1.0   \n",
       "7               0.118    0.046    0.147436  1.249457               1.0   \n",
       "8               0.090    0.046    0.146497  1.627742               1.0   \n",
       "9               0.116    0.046    0.167883  1.447269               1.0   \n",
       "\n",
       "   leverage  conviction  zhangs_metric   jaccard  certainty  kulczynski  \n",
       "0  0.031964    1.163082       0.394871  0.251064   0.140215    0.403227  \n",
       "1  0.031964    1.204897       0.373115  0.251064   0.170054    0.403227  \n",
       "2  0.004512    1.020324       0.072868  0.181452   0.019919    0.308464  \n",
       "3  0.004512    1.024522       0.069054  0.181452   0.023935    0.308464  \n",
       "4  0.014216    1.203086       0.349597  0.133721   0.168804    0.282217  \n",
       "5  0.017740    1.403182       0.423794  0.128492   0.287334    0.328804  \n",
       "6  0.009184    1.127556       0.226363  0.119792   0.113126    0.268633  \n",
       "7  0.009184    1.034526       0.290192  0.119792   0.033374    0.268633  \n",
       "8  0.017740    1.066194       0.562175  0.128492   0.062084    0.328804  \n",
       "9  0.014216    1.062351       0.425680  0.133721   0.058691    0.282217  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#association rules\n",
    "rules = association_rules(frequent_items, metric='lift', min_threshold=0.03, num_itemsets=2)\n",
    "rules.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "713790b1",
   "metadata": {
    "papermill": {
     "duration": 0.003645,
     "end_time": "2025-03-09T12:05:56.662385",
     "exception": false,
     "start_time": "2025-03-09T12:05:56.658740",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "[Github Link](https://github.com/SkitahWambui/RFM-BASKET-ANALYSIS-USING-SQL/blob/master/README.md)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 3832385,
     "sourceId": 6638415,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.598945,
   "end_time": "2025-03-09T12:05:57.386065",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-09T12:05:47.787120",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
